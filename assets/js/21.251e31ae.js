(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{367:function(s,t,r){"use strict";r.r(t);var n=r(42),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h2",{attrs:{id:"记录第一次sql优化经历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#记录第一次sql优化经历"}},[s._v("#")]),s._v(" 记录第一次sql优化经历")]),s._v(" "),r("h3",{attrs:{id:"优化过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优化过程"}},[s._v("#")]),s._v(" 优化过程")]),s._v(" "),r("p",[s._v("  今天按照项目经理的要求，需要对系统进行压力测试，\n系统虽然在很多地市上线，但是听测试人员说还没做过压力测试，顿时柑橘我的压力就上来了，\n首先按照测试的要求，系统录入了6万多条数据，录入后，自己测试一遍，我靠！一个sql居然2分半钟才执行完，\n页面就跟不用说了，直接404，由于自己对sql优化方面没有实际性的做过，只是知道一些理论上的东西，算是了解吧，\n首先是自己找找原因，拿着sql执行了一下，发现是最后的"),r("code",[s._v("order by")]),s._v("排序语句导致\n然后百度，结合自己的业务，知道是因为没有添加索引导致，导致全表扫描。现总结一下优化过程：")]),s._v(" "),r("div",{staticClass:"language-sql extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sql"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 1、查询所有的索引")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" user_indexes  \n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 2、创建索引  ")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 对于这个索引的名称的命名规则，之前的同事的命名都是已 PK 开头，不知道对名称是不是又特别的要求 ")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" 索引名称 "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" 表名 "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--  2.1 复合索引")]),s._v("\n     "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" 索引名称 "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" 表名 "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名"),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("字段名"),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 3、删除索引  ")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" 索引名称\n\n")])])]),r("p",[s._v("这样索引就创建好了， 创建好数据库自动帮我们引用。"),r("br"),s._v("\n试着执行，发现不管用，然后创建了一个复合索引，删掉一个排序字段，果然速度蹭蹭的就上来了，一下由原来的2分30秒，到现在的0.5秒;\n接着测试另外一个接口, 数据量上来了也速度慢也体现出来了，拿着sql执行了一下48s，哇还好，比刚才那个时间短，心里暗喜"),r("br"),s._v("\n开始分析原因，也是由于需要对结果进行排序导致的，去掉排序语句，速度1秒内，加上排序语句48s，"),r("br"),s._v("\n有了刚才的经验，三两下就把索引创建出来了，试着执行，令我失望了，执行时间没变，这下慌了，赶紧百度看下大佬的看法，"),r("br"),s._v("\n这里吐槽一下，很多博客，不知道是干啥的，一模一样，还大大的写着原创，我真是服了。"),r("br"),s._v("\n了解到plsql里有一个"),r("strong",[s._v("解释计划")]),s._v("(快捷键选中sql语句按F5)，或者右键选择解释计划。"),r("br"),s._v(" "),r("img",{attrs:{src:"https://hg-tian-guangzhou.oss-cn-shenzhen.aliyuncs.com/docblog/sql%E4%BC%98%E5%8C%96/01.jpg",alt:"RUNOOB 01"}}),r("br"),s._v("\n可以在这里配置解释计划显示的内容"),r("br"),s._v(" "),r("img",{attrs:{src:"https://hg-tian-guangzhou.oss-cn-shenzhen.aliyuncs.com/docblog/sql%E4%BC%98%E5%8C%96/02.jpg",alt:"RUNOOB 02"}}),r("br"),s._v("\n执行顺序：遵循最右最上的顺序，即缩进最多的先执行，相同缩进长度的最上的先执行。")]),s._v(" "),r("h3",{attrs:{id:"plsql解释计划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#plsql解释计划"}},[s._v("#")]),s._v(" plsql解释计划")]),s._v(" "),r("p",[r("strong",[s._v("解释计划的常用列字段解释：")]),r("br"),s._v("\n基数（Rows）：Oracle估计的当前操作的返回结果集行数"),r("br"),s._v("\n字节（Bytes）：执行该步骤后返回的字节数"),r("br"),s._v("\n耗费（COST）、CPU耗费：Oracle估计的该步骤的执行成本，用于说明SQL执行的代价，理论上越小越好（该值可能与实际有出入）"),r("br"),s._v("\n时间（Time）：Oracle估计的当前操作所需的时间"),r("br"),s._v(" "),r("strong",[s._v("动作说明")]),s._v("："),r("br"),s._v("\nTABLE ACCESS FULL（全表扫描）"),r("br"),s._v("\nTABLE ACCESS BY ROWID（通过ROWID的表存取）"),r("br"),s._v("\nTABLE ACCESS BY INDEX SCAN（索引扫描）"),r("br"),s._v("\nTABLE ACCESS BY INDEX ROWID （通过索引rowid）"),r("br"),s._v(" "),r("strong",[s._v("索引扫描方式")]),s._v("："),r("br"),s._v("\nINDEX UNIQUE SCAN（索引唯一扫描）"),r("br"),s._v("\nINDEX RANGE SCAN（索引范围扫描）"),r("br"),s._v("\nINDEX FULL SCAN（索引全扫描）"),r("br"),s._v("\nINDEX FAST FULL SCAN（索引快速扫描）"),r("br"),s._v("\nINDEX SKIP SCAN（索引跳跃扫描）"),r("br"),s._v(" "),r("strong",[s._v("表连接的几种方式")]),s._v("："),r("br"),s._v("\nSORT MERGE JOIN（排序-合并连接）"),r("br"),s._v("\nNESTED LOOPS（嵌套循环）"),r("br"),s._v("\nHASH JOIN（哈希连接）"),r("br"),s._v("\nCARTESIAN PRODUCT（笛卡尔积）"),r("br"),s._v("\n详细的可以参阅读下面这篇博客"),r("br"),s._v(" "),r("a",{attrs:{href:"https://www.cnblogs.com/Dreamer-1/p/6076440.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/Dreamer-1/p/6076440.html"),r("OutboundLink")],1)]),s._v(" "),r("h3",{attrs:{id:"强制索引"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强制索引"}},[s._v("#")]),s._v(" 强制索引")]),s._v(" "),r("p",[s._v("了解完这些以后，结合我自己的sql发现，我添加的索引根本就没有执行，然后网上去百度索引没有被执行的原因"),r("br"),s._v("\n可以网上查找不被执行的原因，这里就不多说了。"),r("br"),s._v(" "),r("strong",[s._v("索引无效原因：")]),r("br"),s._v(" "),r("a",{attrs:{href:"https://www.cnblogs.com/ghq120/p/10348612.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/ghq120/p/10348612.html"),r("OutboundLink")],1),r("br"),s._v(" "),r("code",[s._v("oracle order by")]),s._v(" 索引是否使用的情况(走索引的条件)"),r("br"),s._v(" "),r("a",{attrs:{href:"https://blog.csdn.net/WuLex/article/details/79756244",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/WuLex/article/details/79756244"),r("OutboundLink")],1),r("br"),s._v("\n跟着改了一下，发现还是没有被执行。  然后就有一个"),r("strong",[s._v("强制索引")]),r("br"),s._v("\n试着对sql添加强制索引，强制索引语法：")]),s._v(" "),r("details",{staticClass:"custom-block details"},[r("summary",[s._v("点击查看代码")]),s._v(" "),r("div",{staticClass:"language-sql extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sql"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*+index(t INDEX_UPDATE_TIME)*/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP T  \n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- t 为表的别名   ")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- INDEX_UPDATE_TIME 为索引名称 ")]),s._v("\n\n")])])])]),s._v(" "),r("p",[s._v("添加后执行sql语句，发现执行时间依然没变。"),r("br"),s._v("\n没办法了，采取排除的方法，找出执行时间就得语句，试着加上索引\n果然，为其中一条加上索引之后  时间缩短了一半27s，  然后再接着找 最后缩短到7s，\n是在不知道那一句sql需要优化了，最后苦苦挣扎了半天，终于吧时间搞到了3s，问测试能不能接受，测试说ok，到此，优化sql告一段落。"),r("br"),s._v("\n总结：本次主要是通过添加索引来优化执行速度。")]),s._v(" "),r("hr"),s._v(" "),r("p",{attrs:{align:"right"}},[s._v("发表日期：2020年7月15日21:05:06")]),s._v(" "),r("p",{attrs:{align:"right"}},[s._v("更新日期：2020年7月16日11:28:11")])])}),[],!1,null,null,null);t.default=a.exports}}]);