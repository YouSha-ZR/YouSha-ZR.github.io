(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{357:function(n,e,t){"use strict";t.r(e);var s=t(42),r=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"_02-nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-nginx"}},[this._v("#")]),this._v(" 02_nginx")]),this._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[this._v('#启动Nginx工作进程的用户和组，比如"user nginx nginx"\n#user  nobody;　　　　　　　　　　　　　　　　　　　　　　　　                      \n    \n#启动nginx工作进程的数量,默认是一个，这个参数取决于你服务器CPU的核心数，一般情况下该值要小于等于你服务器的核心数哟。在nginx1.8版本之后咱们可以直接写"auto",即无需手写几个core数量，而是交给nginx自动取判断服务器拥有的core数量。\nworker_processes  4;　　　\n    \n#将Nginx工作进程绑定到指定的CPU核心，默认Nginx是不进行进程绑定的，绑定并不是意味着当前nginx进程独占以一核心CPU，但是可以保证此进程不会运行在其他核心上，这就极大减少了nginx的工作进程在不同的cpu核心上的来回跳转，减少了CPU对进程的资源分配与回收以及内存管理等，因此可以有效的提升nginx服务器的性能。\nworker_cpu_affinity 00000001 00000010 00000100 00001000; \n    \n#错误日志记录配置，语法：error_log file [debug | info | notice | warn | error | crit |alert | emerg]\n#error_log  logs/error.log;                                                 \n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n     \n#pid文件保存路径 \n#pid        logs/nginx.pid;                         \n                           \n#工作进程优先级，-20~19  \nworker_priority 0;              \n                                              \n#这个数字包括Nginx的所有连接（例如与代理服务器的连接等），而不仅仅是与客户端的连接,另一个考虑因素是实际的并发连接数不能超过系统级别的最大打开文件数的限制.\nworker_rlimit_nofile 65536;                   \n                                 \n#前台运行Nginx服务用于测试、docker等环境。   \ndaemon off;                                                           \n        \n#是否开启Nginx的master-woker工作模式。\nmaster_process off|on;                                                       \n    \n#events设置快，主要影响nginx服务器与用户的网络连接，比如是否允许同时接受多个网络连接，使用哪种事件驱动模型处理请求，每个工作进程可以同时支持的最大连接数，是否开启对多工作进程下的网络连接进行序列化等。\nevents {\n\n    #设置单个nginx工作进程可以接受的最大并发，作为web服务器的时候最大并发数为"worker_connections * worker_processes"，作为反向代理的时候为"(worker_connections * worker_processes)/2"(因为反向代理服务器是响应一个客户端请求连接需要消耗两个文件描述符，即接收客户端请求需要消耗一个文件描述符，将请求转发给后端的rip服务器处理又消费了一个文件描述符)\n    worker_connections  100000;                  \n        \n    #使用epoll事件驱动，Nginx支持众多的事件驱动，比如select、poll、epoll，只能设置在events模块中设置。\n    use epoll;                                                               \n        \n    #优化同一时刻只有一个请求而避免多个睡眠进程被唤醒的设置，on为防止被同时唤醒默认为off，全部唤醒的过程也成为"惊群"，因此nginx刚安装完以后要进行适当的优化。\n    accept_mutex on;                                                         \n        \n    #Nginx服务器的每个工作进程可以同时接受多个新的网络连接，但是需要在配置文件中配置，此指令默认为关闭，即默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个，配置语法如下：\n    multi_accept on; \n        \n}\n\n#http块是Nginx服务器配置中的重要部分，缓存、代理和日志格式定义等绝大多数功能和第三方模块都可以在这设置，http块可以包含多个server块，而一个server块中又可以包含多个location块，server块可以配置文件引入、MIME-Type定义、日志自定义、是否启用sendfile、连接超时时间和单个链接的请求上限等。\nhttp {\n    \n    #导入支持的文件类型，mime.types：支持的mime类型，MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型，MIME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据，是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n    include       mime.types;\n        \n    #设置默认的类型，会提示下载不匹配的类型文件\n    default_type  application/octet-stream;\n        \n    #日志配置部分\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    #                  \'$status $body_bytes_sent "$http_referer" \'\n    #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n        \n    \n    #access_log  logs/access.log  main;\n\n    #指定是否使用sendfile系统调用来传输文件,sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝，硬盘 >> kernel buffer (快速拷贝到kernelsocket buffer) >>协议栈。作为web服务器的时候我推荐大家打开sendfile加快文件传输\n    sendfile        on;\n       \n    #在开启了sendfile的情况下，合并请求后统一发送给客户端。\n    #tcp_nopush     on;\n \n    #在开启了keepalived模式下的连接是否启用TCP_NODELAY选项，当为off时，延迟0.2s发送，默认On时，不延迟发送，立即发送用户相应报文。\n    #tcp_nodelay off;\n\n    #长连接超时时间，单位是秒，即设置会话保持时间\n    #keepalive_timeout  0;\n\n    #设置会话保持时间时，我们也可以指定2个参数，第一个参数表示会话的保存时间，第二个参数是nginx通过response报文告诉客户端会话的保持时间，比如咱们配置的了服务端主动告诉客户端设置的连接超时时间是60秒，而实际上是65秒会话才会断开哟~\n    keepalive_timeout  65 60;\n　　\n　　 #通常情况下咱们都会开启压缩功能的哟~\n    #gzip  on;\n\n    #设置一个虚拟机主机，可以包含自己的全局快，同时也可以包含多个locating模块。比如本虚拟机监听的端口、本虚拟机的名称和IP配置，多个server 可以使用一个端口，比如都使用80端口提供web服务、\n    server {\n\n        #配置server监听的端口\n        listen       80;\n\n        #本server的名称，当访问此名称的时候nginx会调用当前serevr内部的配置进程匹配，以空格方式隔开多个FQDN，当然也支持正则表达式的方式匹配主机名。\n        server_name  localhost;\n　　　　\n　 　　  #指定编码格式，推荐修改为UTF-8字符编码\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location其实是server的一个指令，为nginx服务器提供比较多而且灵活的指令，都是在location中提现的，主要是基于nginx接受到的请求字符串，对用户请求的UIL进行匹配，并对特定的指令进行处理，包括地址重定向、数据缓存和应答控制等功能都是在这部分实现，另外很多第三方模块的配置也是在location模块中配置。\n        location / {\n\n            #相当于默认页面的目录名称，默认是相对路径（如果是基于yum方式安装则是"/usr/share/nginx/html/"，如果是基于源码方式安装，则在安装目录的下，如"/yinzhengjie/softwares/nginx/html/"),当然咱们也可以使用绝对路径配置。\n            root   html;\n\n            #默认的页面文件名称\n            index  index.html index.htm;\n        }\n\n        #错误页面的文件名称\n        #error_page  404              /404.html;\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n\n        #location处理对应的不同错误码的页面定义到/50x.html，这个跟对应其server中定义的目录下。\n        location = /50x.html {\n\n            #定义默认页面所在的目录\n            root   html;\n        }\n\n        #以http的方式转发php请求到指定web服务器\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        #以fastcgi的方式转发php请求到php处理\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache\'s document root\n        # concurs with nginx\'s one\n        #\n        #location ~ /\\.ht {\n             #拒绝web形式访问指定文件，如很多的网站都是通过.htaccess文件来改变自己的重定向等功能。\n        #    deny  all;\n        #}\n    }\n\n    #自定义虚拟server\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n\n    #    location / {\n    #        root   html;\n             #指定默认网页文件，此指令由ngx_http_index_module模块提供\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n    #https服务器配置\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n#和邮件相关的配置\n#mail {\n# ...         #mail 协议相关配置段\n# } \n\n#tcp代理配置，1.9版本以上支持\n#stream {\n# ...         #stream 服务器相关配置段\n# } \n\n#导入其他路径的配置文件\n#include /yinzhengjie/softwares/nginx/conf.d/*.conf;\n \n}\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);